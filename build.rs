use serde::Serialize;

use cargo_util_schemas::manifest::TomlManifest;

#[derive(Debug, Serialize)]
struct Metadata {
    _comment: &'static str,
    unique_identifier: String,
    name: String,
    author: String,
    version: String,
    interpreter: String,
    metadata_file: String,
    description: String,
    binary_path: String,
    source: u32,
}

fn main() {
    let manifest = std::fs::read_to_string("Cargo.toml").expect("cannot read Cargo.toml");
    let manifest: TomlManifest = toml::from_str(&manifest).expect("cannot parse Cargo.toml");
    let package = manifest.package().expect("no [package] section");

    let name = package
        .normalized_name()
        .map(|n| n.clone().into_inner())
        .expect("no package.name");
    let version = package
        .version
        .as_ref()
        .and_then(|v| Some(v.as_value()?.to_string()))
        .expect("no package.version");
    let metadata = Metadata {
        _comment: "THIS FILE IS AUTOGENERATED! DO NOT TOUCH!",
        unique_identifier: name.clone(),
        name: name.clone(),
        author: package
            .authors
            .as_ref()
            .cloned()
            .and_then(|vs| vs.as_value()?.first().cloned())
            .unwrap_or_default(),
        version: version.clone(),
        interpreter: String::new(),
        metadata_file: String::new(),
        description: package
            .description
            .as_ref()
            .and_then(|d| d.as_value())
            .map_or(String::new(), |x| x.clone()),
        binary_path: format!("{name}.elf"),
        source: 1,
    };
    let metadata = serde_json::to_string_pretty(&metadata).unwrap();
    std::fs::write("target/metadata.json", &metadata).unwrap();
    std::fs::write("target/version.txt", &version).unwrap();

    println!("cargo:rustc-link-search=resources");
    println!("cargo:rustc-link-arg=--shared");
    println!("cargo:rustc-link-arg=--retain-symbols-file=retain-symbols.txt");
    println!("cargo:rustc-link-arg=--gc-sections");
    println!("cargo:rustc-link-arg=--strip-debug");
    println!("cargo:rustc-link-arg=--discard-locals");
    println!("cargo:rustc-link-arg=--entry=main");
}
